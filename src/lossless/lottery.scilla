scilla_version 0

import BoolUtils IntUtils PairUtils ListUtils

library LosslessLottery

let zero: Uint128 = Uint128 0
let one: Uint128 = Uint128 1
let hundred: Uint128 = Uint128 100
let successful_deposit_code: Int32 = Int32 -1
let percentages_added: Int32 = Int32 -10

type Error =
| InsufficientBalance
| UserNotPresent
| NotOwner
| NotYieldContract
| IncorrectPercentage
| NoWinningAmount

let make_error =
fun (result : Error) =>
  let result_code = 
    match result with
    | InsufficientBalance             => Int32 -1
    | UserNotPresent                 => Int32 -2
    | NotOwner                   => Int32 -3
    | NotYieldContract                  => Int32 -4
    | IncorrectPercentage => Int32 -5
    | NoWinningAmount => Int32 -6
    end
  in
  { _exception : "ContractError"; code : result_code }

let get_user_amount = 
    fun (bs : Map ByStr20 Uint128) =>
    fun (sender : ByStr20) =>
        builtin get bs sender

let one_msg = fun(msg: Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let two_msgs =
    fun (msg1 : Message) =>
    fun (msg2 : Message) =>
        let msgs_tmp = one_msg msg2 in
        Cons {Message} msg1 msgs_tmp

contract LosslessLottery(owner: ByStr20, 
                         owner_compound_percent: Uint128,
                         owner_lottery_percent: Uint128)

field backers_current_deposit : Map ByStr20 Uint128 = Emp ByStr20 Uint128
field backers_prev_deposit: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field backers_p_lottery: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field backers_p_interest: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field staking_contract: ByStr20 = 0x62a9d5d611cdcae8d78005f31635898330e06b93
field ssn_addr: ByStr20 = 0x82b82c65213e0b2b206492d3d8a2a679e7fe52e0
field user_interests: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field user_lottery_deposit: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field current_yield: Uint128 = Uint128 0
field prev_balance: Uint128 = Uint128 0
field total_restaking_amount: Uint128 = Uint128 0
field total_sum: Uint128 = Uint128 0
field round_number: Uint128 = Uint128 0
field user_lottery_range: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field lottery_winner: ByStr20 = 0xfb7ba19013b3c1fc3c20da60d42fd3aca66f5195
field lottery_prize: Uint128 = Uint128 0
field random_seed: Uint128 = Uint128 0
field round_number: Uint128 = Uint128 0
field range_start: Uint128 = Uint128 0
field user_lotteryPrize: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field available_withdrawal: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field bnum_required: Uint128 = Uint128 3500
field matured_amount: Uint128 = Uint128 0
field user_withdraw_dict: Map ByStr20 (Map BNum Uint128) = Emp ByStr20 (Map BNum Uint128)

(* New variables below *)

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsOwner(initiator: ByStr20)
  is_owner = builtin eq initiator owner;
  match is_owner with
    | True =>
    | False =>
        err = NotOwner;
        ThrowError err
    end
end

procedure assignWinner(user_end: Pair ByStr20 Uint128)
    match user_end with
    | Pair user end_idx =>
        start_idx <- range_start;
        random_seed_local <- random_seed;
        is_start = uint128_ge random_seed_local start_idx;
        is_end = uint128_gt end_idx random_seed_local;
        range_start := end_idx;
        match is_start with
        | True =>
            match is_end with
            | True =>
                lottery_winner := user
            | False =>
            end
        | False =>
        end
    end
end

procedure findUserRange(user_amount: Pair ByStr20 Uint128)
(* statements go below *)
    match user_amount with
    | Pair user amount =>
      user_range_start <- range_start;
      user_range_end = builtin add user_range_start amount;
      user_lottery_range[user] := user_range_end;
      range_start := user_range_end
    end
end

procedure updateWinnerPrize(winner: ByStr20, prize: Uint128)
    user_existing_lottery_prize <- user_lotteryPrize[winner];
    match user_existing_lottery_prize with
    | Some amt =>
        new_amt = builtin add amt prize;
        user_lotteryPrize[winner] := new_amt
    | None =>
        user_lotteryPrize[winner] := prize
    end
end

transition lottery(rand_seed: Uint128)
    IsOwner _sender;
    user_lottery_contribution  <- user_lottery_deposit;
    user_lotteryDeposit_listpair = builtin to_list user_lottery_contribution;
    range_start := zero;
    forall user_lotteryDeposit_listpair findUserRange;

    sum <- range_start;
    owner_cut = builtin mul sum owner_lottery_percent;
    owner_cut = builtin div owner_cut hundred;

    user_lottery_range_local <- user_lottery_range;
    user_range_list = builtin to_list user_lottery_range_local;
    rand_seed = builtin rem rand_seed sum;
    random_seed := rand_seed;
    prize = builtin sub sum owner_cut;
    lottery_prize := prize;

    range_start := zero;
    forall user_range_list assignWinner;
    round_number_local <- round_number;
    round_winner_local <- lottery_winner;
    winning_amount <- lottery_prize;
    updateWinnerPrize round_winner_local prize;
    msg = {
        _recipient: _sender;
        _amount: owner_cut;
        _tag: "Lottery Owner Cut"
    };
    e = {
            _eventname: "Lottery Draw";
            roundNumber: round_number_local;
            roundWinner: round_winner_local;
            roundLotteryAmount: winning_amount
    };
    msgs = one_msg msg;
    send msgs;
    event e

end

transition PayoutLotteryWinner()

    sender_lottery_prize <- user_lotteryPrize[_sender];
    match sender_lottery_prize with
    | Some amt =>
        msg = {
            _recipient: _sender;
            _amount: amt;
            _tag: "Lottery Prize Transfer"
        };
        msgs = one_msg msg;
        send msgs
    | None =>
        err = NoWinningAmount;
        ThrowError err
    end
end

