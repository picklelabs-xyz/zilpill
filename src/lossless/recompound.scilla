scilla_version 0

import BoolUtils IntUtils PairUtils ListUtils

library LosslessLottery

let zero: Uint128 = Uint128 0
let one: Uint128 = Uint128 1
let hundred: Uint128 = Uint128 100
let successful_deposit_code: Int32 = Int32 -1
let percentages_added: Int32 = Int32 -10

type Error =
| InsufficientBalance
| UserNotPresent
| NotOwner
| NotYieldContract
| IncorrectPercentage
| NoWinningAmount
| NotTransferContract

let make_error =
fun (result : Error) =>
  let result_code = 
    match result with
    | InsufficientBalance             => Int32 -1
    | UserNotPresent                 => Int32 -2
    | NotOwner                   => Int32 -3
    | NotYieldContract                  => Int32 -4
    | IncorrectPercentage => Int32 -5
    | NoWinningAmount => Int32 -6
    | NotTransferContract => Int32 -7
    end
  in
  { _exception : "ContractError"; code : result_code }

let get_user_amount = 
    fun (bs : Map ByStr20 Uint128) =>
    fun (sender : ByStr20) =>
        builtin get bs sender

let one_msg = fun(msg: Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let two_msgs =
    fun (msg1 : Message) =>
    fun (msg2 : Message) =>
        let msgs_tmp = one_msg msg2 in
        Cons {Message} msg1 msgs_tmp

contract LosslessLottery(owner: ByStr20, 
                         owner_compound_percent: Uint128,
                         owner_lottery_percent: Uint128)

field backers_current_deposit : Map ByStr20 Uint128 = Emp ByStr20 Uint128
field backers_prev_deposit: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field backers_p_lottery: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field backers_p_interest: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field staking_contract: ByStr20 = 0x0f1a8a1b71826c9a8b16078244bd92d9660c697f
field gzil_contract: ByStr20 = 0xf3ff53bacc824678b2833ea0edb82b01e8f570ed
field ssn_addr: ByStr20 = 0xda97F61825773A649ca28351FC0D92B4f32d184D
field ownership_tranfer_contract: ByStr20 = 0xda97F61825773A649ca28351FC0D92B4f32d184D
field user_interests: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field user_lottery_deposit: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field current_yield: Uint128 = Uint128 0
field prev_balance: Uint128 = Uint128 0
field total_restaking_amount: Uint128 = Uint128 0
field total_sum: Uint128 = Uint128 0
field user_lottery_range: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field lottery_winner: ByStr20 = 0xfb7ba19013b3c1fc3c20da60d42fd3aca66f5195
field lottery_prize: Uint128 = Uint128 0
field random_seed: Uint128 = Uint128 0
field round_number: Uint128 = Uint128 0
field range_start: Uint128 = Uint128 0
field user_lotteryPrize: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field bnum_required: Uint128 = Uint128 12
field matured_amount: Uint128 = Uint128 0
field user_withdraw_dict: Map ByStr20 (Map BNum Uint128) = Emp ByStr20 (Map BNum Uint128)

(* New variables below *)

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsOwner(initiator: ByStr20)
  is_owner = builtin eq initiator owner;
  match is_owner with
    | True =>
    | False =>
        err = NotOwner;
        ThrowError err
    end
end


transition AddFunds()
      accept
end

transition WithdrawStakeRewardsSuccessCallBack(ssnaddr: ByStr20, rewards: Uint128)
    current_yield := rewards
end

transition fetch_yield()
    IsOwner _sender;
    staking_contract_local <- staking_contract;
    r_number <- round_number;
    current_balance <- _balance;
    prev_balance := current_balance;
    r_number_new = builtin add r_number one;
    round_number := r_number_new;
    ssn_addr_local <- ssn_addr;
    msg = {
        _recipient: staking_contract_local;
        _amount: zero;
        _tag: "WithdrawStakeRewards";
        ssn_addr: ssn_addr_local
    };
    msgs = one_msg msg;
    send msgs
end

procedure updateUserDeposit(user: ByStr20, yield: Uint128)
(* statements go below *)
    current_deposit <- backers_current_deposit[user];
    match current_deposit with
    | Some amount =>
        new_amount = builtin add amount yield;
        backers_current_deposit[user] := new_amount
    | None =>
      err = UserNotPresent;
      ThrowError err
    end
end

procedure findValueSum(address_value: Pair ByStr20 Uint128)
(* statements go below *)
    match address_value with
    | Pair address value =>
        previous_total <- total_sum;
        current_total = builtin add previous_total value;
        total_sum := current_total
    end
end

procedure updateRecompoundingYield(user: ByStr20, user_yield: Uint128)
(* statements go below *)
    compounding_contribution <- backers_p_interest[user];
    match compounding_contribution with
    | Some percentage =>
        user_recompounding_yield = builtin mul percentage user_yield;
        user_recompounding_yield = builtin div user_recompounding_yield hundred;
        total_restaking_amount_tmp <- total_restaking_amount;
        current_restaking_amount = builtin add total_restaking_amount_tmp user_recompounding_yield;
        total_restaking_amount := current_restaking_amount;
        user_interests[user] := user_recompounding_yield;
        updateUserDeposit user user_recompounding_yield
    | None =>
        err = UserNotPresent;
        ThrowError err
    end
end

procedure updateLotteryYield(user: ByStr20, user_yield: Uint128)
(* statements go below *)
    lottery_contribution <- backers_p_lottery[user];
    match lottery_contribution with
    | Some percentage =>
        user_lottery_yield = builtin mul percentage user_yield;
        user_lottery_yield = builtin div user_lottery_yield hundred;
        user_lottery_deposit[user] := user_lottery_yield
    | None =>
        err = UserNotPresent;
        ThrowError err
    end
end


procedure distributeYield(address_value: Pair ByStr20 Uint128)
(* statements go below *)
    yield <- current_yield;
    total_amount <- total_sum;
    match address_value with
    |   Pair user amount =>
            user_yield_tmp = builtin mul yield amount;
            user_yield = builtin div user_yield_tmp total_amount;
            updateRecompoundingYield user user_yield;
            updateLotteryYield user user_yield    
    end
end

procedure calcUserYield(yields: Uint128)
(* statements go below *)

    (* Updated calculations code *)
    (* Calculate total amount deposited *)
    total_sum := zero;
    user_amounts <- backers_prev_deposit;
    user_amount_listpair = builtin to_list user_amounts;
    forall user_amount_listpair findValueSum;
    (* Calculated total amount deposited in field total_sum *)
    forall user_amount_listpair distributeYield;

    restaking_amount <- total_restaking_amount;
    staking_contract_address <- staking_contract;
    current_ssn_addr <- ssn_addr;
    msg_stake = {
        _tag: "DelegateStake";
        _recipient: staking_contract_address;
        _amount: restaking_amount;
        ssn_addr: current_ssn_addr
    };
    msgs = one_msg msg_stake;
    send msgs
end

transition compound_yield()
  IsOwner _sender;
  previous_balance <- prev_balance;
  current_balance <- _balance;
  contract_address <- staking_contract;
  
  yield = builtin sub current_balance previous_balance;
  current_yield := yield;
  owner_cut = builtin mul yield owner_compound_percent;
  owner_cut = builtin div owner_cut hundred;

  users_yield = builtin sub yield owner_cut;
  total_restaking_amount := zero;
  calcUserYield users_yield;
  backers_current_deposit_local <- backers_current_deposit;
  backers_prev_deposit := backers_current_deposit_local;
  msg = {
          _recipient: owner;
          _amount: owner_cut;
          _tag: "Owner Cut from compounding"
      };
  msgs = one_msg msg;
  send msgs
end
