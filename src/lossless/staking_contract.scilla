scilla_version 0

import BoolUtils IntUtils PairUtils

library LosslessLottery

let zero: Uint128 = Uint128 0
let one: Uint128 = Uint128 1
let ten: Uint128 = Uint128 10
let hundred: Uint128 = Uint128 100
let successful_deposit_code: Int32 = Int32 -1
let insufficient_balance_code: Int32 = Int32 -2
let user_not_present_code: Int32 = Int32 -3
let fund_withdraw_success_code: Int32 = Int32 -4
let staking_contract_adress_update: Int32 = Int32 -5
let not_owner_code: Int32 = Int32 -6
let owner_withdrawal: Int32 = Int32 -7
let not_yield_contract_error: Int32 = Int32 -8
let yield_accepted: Int32 = Int32 -9

let fst_user_yield = 
  fun (pair: Pair ByStr20 Uint128) =>
    let fst_user = @fst ByStr20 Uint128 in
    fst_user pair
  
let snd_user_yield = 
  fun (pair: Pair ByStr20 Uint128) =>
    let snd_yield = @snd ByStr20 Uint128 in
    snd_yield pair

let fst_list : forall 'A. List 'A -> List 'A = 
    tfun 'A =>
    tfun 'B =>
    tfun 'C =>
    fun (l: List 'A) =>
        let foldr = @list_foldr 'A (List 'A) in
        let init = Nil {'A} in
        let iter = 
            fun (h : 'A) => 
            fun (z : List 'A) =>
                let fst_fetch = @fst 'B 'C in
                let h1 = fst_fetch h in
                Cons {'A} h1 z in
        foldr iter init
        
let snd_list : forall 'A. List 'A -> List 'A = 
    tfun 'A =>
    fun (l: List 'A) =>
        let foldr = @list_foldr 'A (List 'A) in
        let init = Nil {'A} in
        let iter = 
            fun (h : 'A) => 
            fun (z : List 'A) =>
                let snd_fetch = @snd ByStr20 Uint128 in
                let h1 = snd_fetch h in
                Cons {'A} h1 z in
        foldr iter init
        
let snd_list_list = 
  fun (pair: Pair List List) =>
    let snd_list = @snd List List in
    snd_list pair

  
let get_user_amount = 
    fun (bs : Map ByStr20 Uint128) =>
    fun (sender : ByStr20) =>
        builtin get bs sender

let one_msg = fun(msg: Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let two_msgs =
    fun (msg1 : Message) =>
    fun (msg2 : Message) =>
        let msgs_tmp = one_msg msg2 in
        Cons {Message} msg1 msgs_tmp

let list_sum: forall 'A. List 'A -> 'A =
    tfun 'A =>
    fun(l: List 'A) =>
        let foldl = @list_foldl 'A Uint128 in
        let init_sum = Uint128 0 in
        let iter = 
            fun(z: 'A) =>
            fun(h: 'A) =>
            builtin add h z in
        foldl init_sum l

let list_mul : forall 'A. List 'A -> 'A -> List 'A = 
    tfun 'A =>
    fun (l: List 'A) =>
    fun(const: Uint128) =>
        let foldr = @list_foldr 'A (List 'A) in
        let init = Nil {'A} in
        let iter = 
            fun (h : 'A) => 
            fun (z : List 'A) =>
                let h1 = builtin mul h const in
                Cons {'A} h1 z in
        foldr iter init


contract LosslessLottery(owner: ByStr20, 
                         owner_percent: Uint128)

field backers : Map ByStr20 Uint128 = Emp ByStr20 Uint128
field staking_contract: ByStr20 = 0x79d75c7ac509ff589db5e3d60e40a6b90d3c200e
field yield_contract: ByStr20 = 0x79d75c7ac509ff589db5e3d60e40a6b90d3c200e
field staking_contract_stake_transition: String = "DelegateStake"
field user_yields: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field current_yield: Uint128 = Uint128 0

transition update_staking_contract(staking_contract_address: ByStr20)
    is_owner = builtin eq _sender owner;
    match is_owner with
    | True =>
        staking_contract := staking_contract_address;
        e = {
            _eventname: "Staking contract address updated";
            code: staking_contract_adress_update
        };
        event e
    | False =>
      e = {
            _eventname: "Staking contract address updated";
            code: not_owner_code
        };
      event e
    end
end

transition OwnerWithdraw()
    is_owner = builtin eq _sender owner;
    match is_owner with
    |   True =>
        msg = {
            _tag: "Withdrawal by Owner";
            _amount: _balance;
            _recipient: _sender;
            code: owner_withdrawal
        };
        msgs = one_msg msg;
        send msgs
    | False =>
        e = {
            _tag: "Not Owner";
            code: not_owner_code
        };
        event e
    end
end

transition PoolIn()
    bs <- backers;
    user_balance = get_user_amount bs _sender;
    accept;
    match user_balance with
    | None =>
        backers[_sender] := _amount;
        msg = { _tag: "Funds Added";
                _recipient: _sender;
                _amount: zero;
                code: successful_deposit_code
            };
        msgs = one_msg msg;
        e = {
            _eventname: "Funds Added";
            user: _sender;
            amount: _amount;
            code: successful_deposit_code
            };
        
        send msgs;
        event e

    | Some sender_amt =>
        new_sender_amt = builtin add sender_amt _amount;
        backers[_sender] := new_sender_amt;
        msg = { _tag: "Funds Added";
                _recipient: _sender;
                _amount: zero;
                code: successful_deposit_code
            };
        msgs = one_msg msg;
        e = {
            _eventname: "Funds Added";
            user: _sender;
            amount: _amount;
            code: successful_deposit_code
            };
        
        send msgs;
        event e
    end
end

(*transition PoolOut(amount: Uint128)*)
(*    bs <- backers;*)
(*    user_balance = get_user_amount bs _sender;*)
(**)
(*    match user_balance with*)
(*    | None =>*)
(*        user_not_present_error ={*)
(*                                _eventname: "User Not Present";*)
(*                                user: _sender;*)
(*                                code: user_not_present_code*)
(*                                };*)
(*        event user_not_present_error*)
(*    | Some user_balance_value =>*)
(*        balance_diff = builtin sub user_balance_value amount;*)
(*        check_sufficient_balance = builtin lt balance_diff zero;*)
(*        match check_sufficient_balance with*)
(*        | True =>*)
(*            insufficient_balance_error ={*)
(*                                        _eventname: "Insufficient Balance";*)
(*                                        user: _sender;*)
(*                                        code: insufficient_balance_code*)
(*                                        };*)
(*            event insufficient_balance_error*)
(*        | False =>*)
(*            backers[_sender] := balance_diff;*)
(*            msg = {*)
(*                    _tag: "Funds Withdrawn";*)
(*                    _recipient: _sender;*)
(*                    _amount: amount;*)
(*                    code: fund_withdraw_success_code*)
(*            };*)
(*            msgs = one_msg msg;*)
(*            send msgs*)
(*        end*)
(*    end*)
(*end*)

transition stake_zil(ssn_addr: ByStr20)
    is_owner = builtin eq _sender owner;
    staking_contract_address <- staking_contract;
    match is_owner with
    | True =>
        msg = {
            _recipient: staking_contract_address;
            _amount: one;
            _tag: "DelegateStake";
            ssn_addr: ssn_addr
        };
        msgs = one_msg msg;
        send msgs
    | False =>
        e = {
            _tag: "Not Owner";
            code: not_owner_code
        };
        event e
    end
end

procedure updateUserYield(user_yield_pair: Pair ByStr20 Uint128)
(* statements go below *)
    user = fst_user_yield user_yield;
    yield = snd_user_yield user_yield;
    user_yields[user] := yield
end


procedure calcUserYield(yields: Uint128)
(* statements go below *)
    empty_map = Emp ByStr20 Uint128;
    user_yields := empty_map;
    user_amount <- backers;
    user_map_to_pairlist = builtin to_list user_amount; (**This will be a list of pairs ByStr20 Uint128**)
    first_list = @fst_list Pair ByStr20 Uint128;
    second_list = @snd_list Pair ByStr20 Uint128;
    users = first_list user_map_to_pairlist; (**Fetch the user list**)
    amounts = second_list user_map_to_pairlist; (**Fetch the amount list**)
    list_sum_function = @list_sum Uint128; 
    list_mul_function = @list_mul Uint128;
    list_div_function = @list_div Uint128;

    total_amount = list_sum_function amount;
    multiplied_yield = list_mul_function amounts yields;
    distributed_yields = list_div_function multiplied_yield total_amount;

    list_zipper = @list_zip ByStr20 Uint128;
    user_yields_listpair = list_zipper users distributed_yields;

    forall user_yields_listpair updateUserYield
end

transition AddFunds()
    is_yield_contract = builtin eq _sender staking_contract;
    match is_yield_contract with
    |   False =>
            e = {
                _eventname: "Not yield contract error";
                _code: not_yield_contract_error
            };
            event e
    |   True =>
            accept;
            e = {
                _eventname: "Yield Accepted";
                _code: yield_accepted
            };
            event e
    end

end

transition compound_yield()
  is_owner = builtin eq _sender owner;
  match is_owner with
    |   False =>
            e = {
                _eventname: "Not Owner Error for Yield";
                code: not_owner_code
            };
            event e
    |   True =>
            current_balance <- _balance;
            msg = {
                  _recipient: staking_contract_address;
                  _amount: zero;
                  _tag: "WithDrawStakeReward";
                  ssn_addr: ssn_addr
            };
            msgs = one_msg msg;
            send msgs;
            new_balance <- _balance;
            yield = builtin sub new_balance current_balance;
            owner_cut_init = builtin mul yield owner_percent;
            owner_cut = builtin div owner_cut_init hundred;
            user_yields = builtin sub yield owner_cut;
            calcUserYield user_yields
    end
end
