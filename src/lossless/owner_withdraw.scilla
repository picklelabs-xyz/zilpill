scilla_version 0

import BoolUtils IntUtils PairUtils ListUtils

library LosslessLottery

let zero: Uint128 = Uint128 0
let one: Uint128 = Uint128 1
let hundred: Uint128 = Uint128 100
let successful_deposit_code: Int32 = Int32 -1
let percentages_added: Int32 = Int32 -10

type Error =
| InsufficientBalance
| UserNotPresent
| NotOwner
| NotYieldContract
| IncorrectPercentage
| NoWinningAmount
| NotTransferContract

let make_error =
fun (result : Error) =>
  let result_code = 
    match result with
    | InsufficientBalance             => Int32 -1
    | UserNotPresent                 => Int32 -2
    | NotOwner                   => Int32 -3
    | NotYieldContract                  => Int32 -4
    | IncorrectPercentage => Int32 -5
    | NoWinningAmount => Int32 -6
    | NotTransferContract => Int32 -7
    end
  in
  { _exception : "ContractError"; code : result_code }

let get_user_amount = 
    fun (bs : Map ByStr20 Uint128) =>
    fun (sender : ByStr20) =>
        builtin get bs sender

let one_msg = fun(msg: Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let two_msgs =
    fun (msg1 : Message) =>
    fun (msg2 : Message) =>
        let msgs_tmp = one_msg msg2 in
        Cons {Message} msg1 msgs_tmp

contract LosslessLottery(owner: ByStr20, 
                         owner_compound_percent: Uint128,
                         owner_lottery_percent: Uint128)

field backers_current_deposit : Map ByStr20 Uint128 = Emp ByStr20 Uint128
field backers_prev_deposit: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field backers_p_lottery: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field backers_p_interest: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field staking_contract: ByStr20 = 0x0f1a8a1b71826c9a8b16078244bd92d9660c697f
field gzil_contract: ByStr20 = 0xf3ff53bacc824678b2833ea0edb82b01e8f570ed
field ssn_addr: ByStr20 = 0xda97F61825773A649ca28351FC0D92B4f32d184D
field ownership_tranfer_contract: ByStr20 = 0xda97F61825773A649ca28351FC0D92B4f32d184D
field user_interests: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field user_lottery_deposit: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field current_yield: Uint128 = Uint128 0
field prev_balance: Uint128 = Uint128 0
field total_restaking_amount: Uint128 = Uint128 0
field total_sum: Uint128 = Uint128 0
field user_lottery_range: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field lottery_winner: ByStr20 = 0xfb7ba19013b3c1fc3c20da60d42fd3aca66f5195
field lottery_prize: Uint128 = Uint128 0
field random_seed: Uint128 = Uint128 0
field round_number: Uint128 = Uint128 0
field range_start: Uint128 = Uint128 0
field user_lotteryPrize: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field bnum_required: Uint128 = Uint128 12
field matured_amount: Uint128 = Uint128 0
field user_withdraw_dict: Map ByStr20 (Map BNum Uint128) = Emp ByStr20 (Map BNum Uint128)

(* New variables below *)

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsOwner(initiator: ByStr20)
  is_owner = builtin eq initiator owner;
  match is_owner with
    | True =>
    | False =>
        err = NotOwner;
        ThrowError err
    end
end


transition TransferSuccessCallBack(sender: ByStr20, recipient: ByStr20, amount: Uint128)
end

procedure transferGzilToOwner(amount: Uint128)
  gzil_contract_local <- gzil_contract; 
  msg = {
    _tag: "Transfer";
    _recipient: _sender;
    _amount: zero;
    to: gzil_contract_local;
    amount: amount
  };
  msgs = one_msg msg;
  send msgs
end

procedure transferStakeOwnershipToOwner()
  staking_contract_local <- staking_contract;
  msg = {
    _tag: "RequestDelegatorSwap";
    _recipient: staking_contract_local;
    _amount: zero;
    new_deleg_addr: _sender
  };
  msgs = one_msg msg;
  send msgs
end

procedure resetParams()
    emp_map = Emp ByStr20 Uint128;
    emp_map_uwd = Emp ByStr20 (Map BNum Uint128);
    emp_map_ulr = Emp ByStr20 Uint128;
    b_num_reset = Uint128 12;
    backers_current_deposit := emp_map;
    backers_prev_deposit:= emp_map;
    backers_p_lottery:= emp_map;
    backers_p_interest:= emp_map;
    user_interests:= emp_map;
    user_lottery_deposit:= emp_map;
    current_yield:= zero;
    prev_balance:= zero;
    total_restaking_amount:= zero;
    total_sum:= zero;
    round_number:= zero;
    user_lottery_range:= emp_map_ulr;
    lottery_prize:= zero;
    random_seed:= zero;
    round_number:= zero;
    range_start:= zero;
    user_lotteryPrize:= emp_map;
    bnum_required:= b_num_reset;
    matured_amount:= zero;
    user_withdraw_dict:= emp_map_uwd
end

procedure ownerBalanceWithdraw()
    amount <- _balance;

    msg = {
        _tag: "User";
        _recipient: owner;
        _amount: amount
    };
    msgs = one_msg msg;
    send msgs
end

transition ownerWithdraw(gzil_amount: Uint128)
    IsOwner _sender;
    transferStakeOwnershipToOwner;
    ownerBalanceWithdraw;
    transferGzilToOwner gzil_amount;
    resetParams
end

