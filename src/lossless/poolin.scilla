scilla_version 0

import BoolUtils IntUtils PairUtils ListUtils

library LosslessLottery

let zero: Uint128 = Uint128 0
let one: Uint128 = Uint128 1
let hundred: Uint128 = Uint128 100
let successful_deposit_code: Int32 = Int32 -1
let percentages_added: Int32 = Int32 -10

type Error =
| InsufficientBalance
| UserNotPresent
| NotOwner
| NotYieldContract
| IncorrectPercentage
| NoWinningAmount
| NotTransferContract

let make_error =
fun (result : Error) =>
  let result_code = 
    match result with
    | InsufficientBalance             => Int32 -1
    | UserNotPresent                 => Int32 -2
    | NotOwner                   => Int32 -3
    | NotYieldContract                  => Int32 -4
    | IncorrectPercentage => Int32 -5
    | NoWinningAmount => Int32 -6
    | NotTransferContract => Int32 -7
    end
  in
  { _exception : "ContractError"; code : result_code }

let get_user_amount = 
    fun (bs : Map ByStr20 Uint128) =>
    fun (sender : ByStr20) =>
        builtin get bs sender

let one_msg = fun(msg: Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let two_msgs =
    fun (msg1 : Message) =>
    fun (msg2 : Message) =>
        let msgs_tmp = one_msg msg2 in
        Cons {Message} msg1 msgs_tmp

contract LosslessLottery(owner: ByStr20, 
                         owner_compound_percent: Uint128,
                         owner_lottery_percent: Uint128,
                         gzil_cont: ByStr20,
                         staking_contract_proxy: ByStr20,
                         ssn_contract: ByStr20, 
                         transferContract: ByStr20)

field backers_current_deposit : Map ByStr20 Uint128 = Emp ByStr20 Uint128
field backers_prev_deposit: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field backers_p_lottery: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field backers_p_interest: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field staking_contract: ByStr20 = staking_contract_proxy
field gzil_contract: ByStr20 = gzil_cont
field ssn_addr: ByStr20 = ssn_contract
field ownership_tranfer_contract: ByStr20 = transferContract
field user_interests: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field user_lottery_deposit: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field current_yield: Uint128 = Uint128 0
field prev_balance: Uint128 = Uint128 0
field total_restaking_amount: Uint128 = Uint128 0
field total_sum: Uint128 = Uint128 0
field user_lottery_range: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field lottery_winner: ByStr20 = 0xfb7ba19013b3c1fc3c20da60d42fd3aca66f5195
field lottery_prize: Uint128 = Uint128 0
field random_seed: Uint128 = Uint128 0
field round_number: Uint128 = Uint128 0
field range_start: Uint128 = Uint128 0
field user_lotteryPrize: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field bnum_required: Uint128 = Uint128 12
field matured_amount: Uint128 = Uint128 0
field user_withdraw_dict: Map ByStr20 (Map BNum Uint128) = Emp ByStr20 (Map BNum Uint128)

(* New variables below *)

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsOwner(initiator: ByStr20)
  is_owner = builtin eq initiator owner;
  match is_owner with
    | True =>
    | False =>
        err = NotOwner;
        ThrowError err
    end
end

procedure updatePercentages(compound_percent: Uint128)
    lottery_percent = builtin sub hundred compound_percent;
    backers_p_lottery[_sender] := lottery_percent;
    backers_p_interest[_sender] := compound_percent
end

(*Success Callback function for PoolIn*)
transition DelegateStakeSuccessCallBack(ssnaddr: ByStr20, amount: Uint128)
  e = {
        _eventname: "Funds Added";
        amount: _amount;
        code: successful_deposit_code;
        ssn_addr: ssnaddr
        };
  event e
end

procedure checkValidPercentage(interest_percent: Uint128)
(* statements go below *)
    is_ge_than_zero = uint128_ge interest_percent zero;
    is_le_than_hundred = uint128_le interest_percent hundred;
    match is_ge_than_zero with
    |   True =>
        match is_le_than_hundred with
        |   True =>
        |   False =>
            err = IncorrectPercentage;
            ThrowError err
        end
    |   False =>
        err = IncorrectPercentage;
        ThrowError err
    end
end

transition PoolIn(interest_percent: Uint128)
    checkValidPercentage interest_percent;
    user_balance <- backers_current_deposit[_sender];
    staking_contract_address <- staking_contract;
    current_ssn_addr <- ssn_addr;
    accept;
    msg_stake = {
        _tag: "DelegateStake";
        _recipient: staking_contract_address;
        _amount: _amount;
        ssnaddr: current_ssn_addr
    };
    msgs = one_msg msg_stake;
    send msgs;

    match user_balance with
    | None =>
        backers_current_deposit[_sender] := _amount;
        updatePercentages interest_percent

    | Some sender_amt =>
        new_sender_amt = builtin add sender_amt _amount;
        backers_current_deposit[_sender] := new_sender_amt;
        updatePercentages interest_percent
    end
end

transition update_percentages(interest_percent: Uint128)
    checkValidPercentage interest_percent;
    user_balance <- backers_current_deposit[_sender];
    match user_balance with
    | None =>
        err = UserNotPresent;
        ThrowError err
    | Some amt =>
        
        lottery_percent = builtin sub hundred interest_percent;
        updatePercentages interest_percent;
        e = {
                _eventname: "Percentages Updated";
                code: percentages_added;
                user: _sender;
                interestPerecent: interest_percent;
                lotteryPercent: lottery_percent
        };
        event e
    end
end

procedure isTransferContract(transferContract: ByStr20)
(* statements go below *)
    transferContractLocal <- ownership_tranfer_contract;
    is_transfer_contract = builtin eq transferContractLocal transferContract;
    match is_transfer_contract with
    | True =>
    | False =>
        err = NotTransferContract;
        ThrowError err
    end
end

procedure updatePrevDeposit()
    current_deposit <- backers_prev_deposit[backer];
    match current_deposit with
    | Some amt =>
    deposit = builtin add amt deposit;
        backers_prev_deposit[backer] := deposit
    | None =>
        backers_prev_deposit[backer] := deposit
    end
end

procedure updateCurrentDeposit()
    current_deposit <- backers_current_deposit[backer];
    match current_deposit with
    | Some amt =>
        deposit = builtin add amt deposit;
        backers_current_deposit[backer] := deposit
    | None =>
        backers_current_deposit[backer] := deposit
    end
end

procedure updateBackerDepositTransfer(backer_deposit: Pair ByStr20 Uint128)
(* statements go below *)
    match backer_deposit with 
    | Pair backer deposit =>
        updatePrevDeposit deposit;
        updateCurrentDeposit deposit
    end
end

procedure updatePercentagesTransfer(user_percent: Pair ByStr20 Uint128)
    match user_percent with
    | Pair user percent =>
        lottery_percent = builtin sub hundred percent;
        backers_p_lottery[_sender] := lottery_percent;
        backers_p_interest[_sender] := percent
    end
end

transition confirmStakeTransfer(transferContract : ByStr20 with contract
    field backers_deposit: Map ByStr20 Uint128,
    field backers_p_lottery: Map ByStr20 Uint128
    end)
    IsOwner _sender;
    isTransferContract transferContract;

    backers_deposit <- & transferContract.backers_deposit;
    backers_deposit = builtin to_list backers_deposit;
    backers_p_lottery_transferContract <- & transferContract.backers_p_lottery;
    backers_p_lottery_transferContract = builtin to_list backers_p_lottery_transferContract;
    forall backers_deposit updateBackerDepositTransfer;
    forall backers_p_lottery_transferContract updatePercentagesTransfer;

    staking_contract_proxy_local <- staking_contract;
    msg1 = {
        _recipient: staking_contract_proxy_local;
        _amount: zero;
        _tag: "ConfirmDelegatorSwap";
        requestor: transferContract
    };
    msg2 = {
        _recipient: transferContract;
        _amount: zero;
        _tag: "confirmStakeTransferSuccessCallback"
    };
    msgs = two_msgs msg1 msg2;
    send msgs
end
