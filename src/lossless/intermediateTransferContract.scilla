scilla_version 0

import BoolUtils IntUtils PairUtils ListUtils

library LosslessLotteryDepositTransfer 

type Error =
| NotOwner
| PendingWithdrawal
| NotStakingContract
| IncorrectPercentage

let make_error =
fun (result : Error) =>
  let result_code = 
    match result with
    | NotOwner             => Int32 -1
    | PendingWithdrawal                 => Int32 -2
    | NotStakingContract => Int32 -3
    | IncorrectPercentage => Int32 -4
    end
  in
  { _exception : "ContractError"; code : result_code }

let one_msg = fun(msg: Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let two_msgs =
    fun (msg1 : Message) =>
    fun (msg2 : Message) =>
        let msgs_tmp = one_msg msg2 in
        Cons {Message} msg1 msgs_tmp

let zero: Uint128 = Uint128 0
let hundred: Uint128= Uint128 100

contract LosslessLotteryDepositTransfer(main_contract: ByStr20, owner: ByStr20, staking_contract_init: ByStr20, ssn: ByStr20)

field recompounding_contract: ByStr20 = main_contract
field staking_contract: ByStr20 = staking_contract_init
field current_ssn: ByStr20 = ssn
field gzil_contract: ByStr20 = 0xf3ff53bacc824678b2833ea0edb82b01e8f570ed
field backers_deposit: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field backers_p_lottery: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field backers_p_interest: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field user_withdrawal_dict: Option Map BNum Uint128 = None {Map BNum Uint128}

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsOwner(initiator: ByStr20)
  is_owner = builtin eq initiator owner;
  match is_owner with
    | True =>
    | False =>
        err = NotOwner;
        ThrowError err
    end
end

procedure transferGzilToOwner(amount: Uint128)
  gzil_contract_local <- gzil_contract; 
  msg = {
    _tag: "Transfer";
    _recipient: _sender;
    _amount: zero;
    to: gzil_contract_local;
    amount: amount
  };
  msgs = one_msg msg;
  send msgs
end

transition ownerBalanceWithdraw()
    IsOwner _sender;
    balance <- _balance;
    msg = {
        _tag: "AddFunds";
        _amount: balance;
        _recipient: owner
    };
    msgs = one_msg msg;
    send msgs
end
procedure ownerBalanceWithdraw_pd()
    IsOwner _sender;
    balance <- _balance;
    msg = {
        _tag: "AddFunds";
        _amount: balance;
        _recipient: owner
    };
    msgs = one_msg msg;
    send msgs
end

transition ownershipTransferToRecompoundingContract()
    recompounding_contract_local <- recompounding_contract;
    staking_contract_local <- staking_contract;
    msg = {
        _tag: "RequestDelegatorSwap";
        _amount: zero;
        _recipient: staking_contract_local;
        new_deleg_addr: recompounding_contract_local
    };
    msgs = one_msg msg;
    send msgs
end

procedure checkValidPercentage(interest_percent: Uint128)
(* statements go below *)
    is_ge_than_zero = uint128_ge interest_percent zero;
    is_le_than_hundred = uint128_le interest_percent hundred;
    match is_ge_than_zero with
    |   True =>
        match is_le_than_hundred with
        |   True =>
        |   False =>
            err = IncorrectPercentage;
            ThrowError err
        end
    |   False =>
        err = IncorrectPercentage;
        ThrowError err
    end
end

procedure isStakingContract(staking_contract_local: ByStr20)
    staking_contract_curr <- staking_contract;
    is_staking_contract = builtin eq staking_contract_curr staking_contract_local;
    match is_staking_contract with
    |   True =>
    |   False =>
        err = NotStakingContract;
        ThrowError err
    end
end

procedure userHasNoWithdrawal()
    withdrawal_dict <- user_withdrawal_dict;
    match withdrawal_dict with
    | None =>
    | Some withdrawal_dict =>
        err = PendingWithdrawal;
        ThrowError err
    end
end

procedure updateUserDeposit(userDeposit: Option Uint128)
    current_ssn_local <- current_ssn;
    match userDeposit with
    | None =>
    | Some amt =>
        backers_deposit[_sender]:=amt
    end
end

procedure updatePercentages(compound_percent: Uint128)
    lottery_percent = builtin sub hundred compound_percent;
    backers_p_lottery[_sender] := lottery_percent;
    backers_p_interest[_sender] := compound_percent
end



transition confirmUserTransferToContract(staking_contract_local : ByStr20 with contract
    field withdrawal_pending: Map ByStr20 (Map BNum Uint128),
    field deposit_amt_deleg: Map ByStr20 (Map ByStr20 Uint128)
    end, recompounding_percent: Uint128)

    isStakingContract staking_contract_local;
    checkValidPercentage recompounding_percent;

    withdrawal_dict <- & staking_contract_local.withdrawal_pending[_sender];
    user_withdrawal_dict := withdrawal_dict;
    userHasNoWithdrawal;
    current_ssn_local <- current_ssn;
    userDeposit <- & staking_contract_local.deposit_amt_deleg[_sender][current_ssn_local];
    
    updateUserDeposit userDeposit;
    updatePercentages recompounding_percent;

    msg = {
        _tag: "ConfirmDelegatorSwap";
        _amount: zero;
        _recipient: staking_contract_local;
        requestor: _sender
    };
    msgs = one_msg msg;
    send msgs
end

transition AddFunds()
    accept
end

transition WithdrawStakeRewardsSuccessCallBack(ssnaddr: ByStr20, rewards: Uint128)
end

transition fetch_yield()
    IsOwner _sender;
    staking_contract_local <- staking_contract;
    ssn_addr_local <- current_ssn;
    msg = {
        _recipient: staking_contract_local;
        _amount: zero;
        _tag: "WithdrawStakeRewards";
        ssn_addr: ssn_addr_local
    };
    msgs = one_msg msg;
    send msgs
end

transition confirmStakeTransfer()
    isStakingContract _sender;
    empty_map = Emp ByStr20 Uint128;
    backers_deposit := empty_map
end

procedure transferStakeOwnershipToOwner()
  staking_contract_local <- staking_contract;
  msg = {
    _tag: "RequestDelegatorSwap";
    _recipient: staking_contract_local;
    _amount: zero;
    new_deleg_addr: _sender
  };
  msgs = one_msg msg;
  send msgs
end

transition ownerWithdraw(gzil_amount: Uint128)
    IsOwner _sender;
    transferStakeOwnershipToOwner;
    ownerBalanceWithdraw_pd;
    transferGzilToOwner gzil_amount
end
