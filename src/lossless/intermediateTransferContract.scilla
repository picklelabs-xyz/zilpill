scilla_version 0

import BoolUtils IntUtils PairUtils ListUtils

library LosslessLotteryDepositTransfer 

type Error =
| NotOwner
| PendingWithdrawal
| NotStakingContract
| IncorrectPercentage

let make_error =
fun (result : Error) =>
  let result_code = 
    match result with
    | NotOwner             => Int32 -1
    | PendingWithdrawal                 => Int32 -2
    | NotStakingContract => Int32 -3
    | IncorrectPercentage => Int32 -4
    end
  in
  { _exception : "ContractError"; code : result_code }

let one_msg = fun(msg: Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let two_msgs =
    fun (msg1 : Message) =>
    fun (msg2 : Message) =>
        let msgs_tmp = one_msg msg2 in
        Cons {Message} msg1 msgs_tmp

contract LosslessLotteryDepositTransfer(main_contract: ByStr20, owner: ByStr20, staking_contract: ByStr20, ssn: ByStr20)

field recompounding_contract: ByStr20 = main_contract
field staking_contract: ByStr20 = staking_contract
field current_ssn: ByStr20 = ssn
field 

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsOwner(initiator: ByStr20)
  is_owner = builtin eq initiator owner;
  match is_owner with
    | True =>
    | False =>
        err = NotOwner;
        ThrowError err
    end
end

transition ownershipTransferToRecompoundingContract()
    recompounding_contract_local <- recompounding_contract;
    staking_contract_local <- staking_contract;
    msg = {
        _tag: "RequestDelegatorSwap";
        _amount: zero;
        _recipient: staking_contract_local;
        new_deleg_addr: recompounding_contract_local
    };
    msgs = one_msg msg;
    send msgs;
end

procedure checkValidPercentage(interest_percent: Uint128)
(* statements go below *)
    is_ge_than_zero = uint128_ge interest_percent zero;
    is_le_than_hundred = uint128_le interest_percent hundred;
    match is_ge_than_zero with
    |   True =>
        match is_le_than_hundred with
        |   True =>
        |   False =>
            err = IncorrectPercentage;
            ThrowError err
        end
    |   False =>
        err = IncorrectPercentage;
        ThrowError err
    end
end

procedure isStakingContract(staking_contract_local)
    staking_contract_curr <- staking_contract;
    is_staking_contract = builtin eq staking_contract_curr staking_contract_local;
    match is_staking_contract with
    |   True =>
    |   False =>
        err = NotStakingContract;
        ThrowError err;
    end
end

procedure userHasNoWithdrawal(withdrawal_dict: Some Map{BNum}{Uint128})
    match withdrawal_dict with
    | None =>
    | Some withdrawal_dict =>
        err = PendingWithdrawal;
        ThrowError err;
    end
end

transition confirmUserTransferToContract(staking_contract_local : ByStr20 with contract
    field withdrawal_pending: Map ByStr20 (Map BNum Uint128)
    field deposit_amt_deleg: Map ByStr20 (Map BNum Uint128)
end, recompounding_percent: Uint128)
    isStakingContract staking_contract_local;
    withdrawal_dict <- & staking_contract_local.withdrawal_pending[_sender];
    userHasNoWithdrawal withdrawal_dict;

    userDeposit <- & staking_contract_local.deposit_amt_deleg[_sender];
    updateDelegDict



