procedure WithdrawalStakeAmt(initiator: ByStr20, ssn: ByStr20, withdraw_amount: Uint128)
    ssn_o <- ssnlist[ssn];
    deleg <- deposit_amt_deleg[initiator][ssn];
    match ssn_o with
    | Some (Ssn active_status stake_amt rewards name urlraw urlapi buffdeposit comm comm_rewards rec_addr) =>
        match deleg with
        | Some amt =>
            AssertNoRewards ssn initiator rewards;
            AsseertNoBufferedDeposit ssn initiator;
            AdjustDeleg ssn initiator amt withdraw_amount;
            new_amt = builtin sub stake_amt withdraw_amount;
            minstake_tmp <- minstake;
            status = uint128_le minstake_tmp new_amt;
            ssn_option_tmp = Ssn status new_amt rewards name urlraw urlapi buffdeposit comm comm_rewards rec_addr;
            ssnlist[ssn] := ssn_option_tmp;
            withdrawal_bnum <- & BLOCKNUMBER;
            withdraw_amt_o <- withdrawal_pending[initiator][withdrawal_bnum];
            withdraw_amt_pending = match withdraw_amt_o with
                | Some v => builtin add v withdraw_amount
                | None => withdraw_amount
                end;
            withdrawal_pending[initiator][withdrawal_bnum] := withdraw_amt_pending;
            e = { _eventname: "Deleg withdraw deposit"; ssn_addr: ssn; deleg_address: initiator; withdraw_amount: withdraw_amount };
            event e;
            match active_status with
            | True =>
                DecreaseTotalStakeAmt withdraw_amount;
                event_decrease = { _eventname: "DecreaseTotalStakeAmt"; decreased_amt: withdraw_amount };
                event event_decrease;
                DecreaseTotalStakeAmtOnStatus new_amt status
            | False =>
                event_decrease = { _eventname: "SSNInactiveBefore" };
                event event_decrease
            end
            | None =>
            e = DelegDoesNotExistAtSSN;
            ThrowError e
            end
        | None =>
            e = SSNNotExist;
            ThrowError e
    end
end