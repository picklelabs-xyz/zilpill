scilla_version 0

import BoolUtils IntUtils PairUtils ListUtils

library LosslessLottery

let zero: Uint128 = Uint128 0
let one: Uint128 = Uint128 1
let two: Uint128 = Uint128 2
let one_zil: Uint128 = Uint128 1000000000000
let ten: Uint128 = Uint128 10
let hundred: Uint128 = Uint128 100
let successful_deposit_code: Int32 = Int32 -1

let fund_withdraw_success_code: Int32 = Int32 -4
let staking_contract_adress_update: Int32 = Int32 -5
let owner_withdrawal: Int32 = Int32 -7
(* let not_yield_contract_error: Int32 = Int32 -8 *)
let yield_accepted: Int32 = Int32 -9
let percentages_added: Int32 = Int32 -10

type Error =
| InsufficientBalance
| UserNotPresent
| NotOwner
| NotYieldContract
| IncorrectPercentage

let make_error =
fun (result : Error) =>
  let result_code = 
    match result with
    | InsufficientBalance             => Int32 -1
    | UserNotPresent                 => Int32 -2
    | NotOwner                   => Int32 -3
    | NotYieldContract                  => Int32 -4
    | IncorrectPercentage => Int32 -5
    end
  in
  { _exception : "ContractError"; code : result_code }

  
let get_user_amount = 
    fun (bs : Map ByStr20 Uint128) =>
    fun (sender : ByStr20) =>
        builtin get bs sender

let one_msg = fun(msg: Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let two_msgs =
    fun (msg1 : Message) =>
    fun (msg2 : Message) =>
        let msgs_tmp = one_msg msg2 in
        Cons {Message} msg1 msgs_tmp
        


contract LosslessLottery(owner: ByStr20, 
                         owner_compound_percent: Uint128,
                         owner_lottery_percent: Uint128)

field backers_current_deposit : Map ByStr20 Uint128 = Emp ByStr20 Uint128
field backers_prev_deposit: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field backers_p_lottery: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field backers_p_interest: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field user_lottery_range: Map ByStr20 (Pair Uint128 Uint128) = Emp ByStr20 (Pair Uint128 Uint128)
field staking_contract: ByStr20 = 0x62a9d5d611cdcae8d78005f31635898330e06b93
field yield_contract: ByStr20 = 0x62a9d5d611cdcae8d78005f31635898330e06b93
field gzil_contract: ByStr20 = 0xa845c1034cd077bd8d32be0447239c7e4be6cb21
field ssn_addr: ByStr20 = 0x82b82c65213e0b2b206492d3d8a2a679e7fe52e0
field staking_contract_stake_transition: String = "DelegateStake"
field user_interests: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field user_lottery_deposit: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field current_yield: Uint128 = Uint128 0
field prev_balance: Uint128 = Uint128 0
field curr_balance: Uint128= Uint128 0
field total_restaking_amount: Uint128 = Uint128 0
field lottery_winner: ByStr20 = 0xfb7ba19013b3c1fc3c20da60d42fd3aca66f5195
field lottery_prize: Uint128 = Uint128 0
field random_seed: Uint128 = Uint128 0
field cs_amount: Uint128 = Uint128 0
field round_number: Uint128 = Uint128 0
field first_val: Uint128 = Uint128 0
field range_start: Uint128 = Uint128 0

(* New variables below *)
field total_sum: Uint128 = Uint128 0

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsOwner(initiator: ByStr20)
  is_owner = builtin eq initiator owner;
  match is_owner with
    | True =>
    | False =>
        err = NotOwner;
        ThrowError err
    end
end

transition update_staking_contract(staking_contract_address: ByStr20)
    IsOwner _sender;
    staking_contract := staking_contract_address;
    e = {
        _eventname: "Staking contract address updated";
        code: staking_contract_adress_update
    };
    event e
end


transition TransferSuccessCallBack(sender: ByStr20, recipient: ByStr20, amount:Uint128)
  accept
end
(* The transition OwnerWithdraw is for testing purpose only. To be removed from mainNet launch *)
transition TransferToOwner(gzil_balance: Uint128)
  gzil_current_contract <- gzil_contract;
  contract_balance <- _balance;
  msg = {
    _tag: "transferring balance to owner";
    _amount: contract_balance;
    _recipient: owner
  };
  msg2 = {
    _tag: "Transfer";
    _amount: zero;
    amount: gzil_balance;
    _recipient: gzil_current_contract;
    to: owner
  };
  msgs = one_msg msg;
  send msgs
end

transition OwnerWithdraw()
    IsOwner _sender;
    bal <- _balance;
    empty_map = Emp ByStr20 Uint128;
    backers_current_deposit := empty_map;
    backers_p_interest := empty_map;
    backers_p_lottery := empty_map;
    backers_prev_deposit := empty_map;
    user_interests := empty_map;
    user_lottery_deposit := empty_map;

    curr_balance := zero;
    current_yield := zero;
    lottery_prize := zero;
    prev_balance := zero;
    random_seed := zero;
    round_number := zero;
    total_restaking_amount := zero;

    msg = {
        _tag: "CompleteWithdrawal";
        _amount: bal;
        _recipient: _sender
    };
    msgs = one_msg msg;
    send msgs
end

procedure updatePercentages(compound_percent: Uint128)
    lottery_percent = builtin sub hundred compound_percent;
    backers_p_lottery[_sender] := lottery_percent;
    backers_p_interest[_sender] := compound_percent
end

(*Success Callback function for PoolIn*)
transition DelegateStakeSuccessCallBack(ssnaddr: ByStr20, amount: Uint128)
  e = {
        _eventname: "Funds Added";
        amount: _amount;
        code: successful_deposit_code;
        ssn_addr: ssnaddr
        };
  event e
end

procedure checkValidPercentage(interest_percent: Uint128)
(* statements go below *)
    is_ge_than_zero = uint128_ge interest_percent zero;
    is_le_than_hundred = uint128_le interest_percent hundred;
    match is_ge_than_zero with
    |   True =>
        match is_le_than_hundred with
        |   True =>
        |   False =>
            err = IncorrectPercentage;
            ThrowError err
        end
    |   False =>
        err = IncorrectPercentage;
        ThrowError err
    end
end

transition PoolIn(interest_percent: Uint128)
    checkValidPercentage interest_percent;
    user_balance <- backers_current_deposit[_sender];
    staking_contract_address <- staking_contract;
    current_ssn_addr <- ssn_addr;
    accept;
    msg_stake = {
        _tag: "DelegateStake";
        _recipient: staking_contract_address;
        _amount: _amount;
        ssnaddr: current_ssn_addr
    };
    msgs = one_msg msg_stake;
    
    send msgs;
    match user_balance with
    | None =>
        backers_current_deposit[_sender] := _amount;
        updatePercentages interest_percent

    | Some sender_amt =>
        new_sender_amt = builtin add sender_amt _amount;
        backers_current_deposit[_sender] := new_sender_amt;
        updatePercentages interest_percent
    end
end



transition update_percentages(interest_percent: Uint128)
    checkValidPercentage interest_percent;
    user_balance <- backers_current_deposit[_sender];
    match user_balance with
    | None =>
        err = UserNotPresent;
        ThrowError err
    | Some amt =>
        
        lottery_percent = builtin sub hundred interest_percent;
        updatePercentages interest_percent;
        e = {
                _eventname: "Percentages Updated";
                code: percentages_added;
                user: _sender;
                interestPerecent: interest_percent;
                lotteryPercent: lottery_percent
        };
        event e
    end
end

procedure PoolOutAssist(amount: Uint128, total_staked_amount: Uint128, current_staked_amount: Uint128)
  remainder = builtin sub total_staked_amount current_staked_amount;
  is_valid_amount = uint128_le amount total_staked_amount;
  current_contract <- staking_contract;
  match is_valid_amount with
  |   True =>
          is_amount_lte_rem = uint128_le amount remainder;
          msg = {
                  _tag: "WithDrawPrincipal";
                  _amount: zero;
                  _recipient: current_contract;
                  receiver: _sender;
                  amount: amount
          };
          msgs = one_msg msg;
          send msgs;
          match is_amount_lte_rem with
          |   True =>
              new_amount = builtin sub total_staked_amount amount;
              backers_current_deposit[_sender] := new_amount
          |   False =>
              new_tsa_amount = builtin sub total_staked_amount amount;
              new_csa_amount_inter = builtin add current_staked_amount remainder;
              new_csa_amount = builtin sub new_csa_amount_inter amount;
              backers_prev_deposit[_sender] := new_csa_amount;
              backers_current_deposit[_sender] := new_csa_amount
          end
          
  |   False =>
        err = InsufficientBalance;
        ThrowError err
  end
end

transition PoolOut(amount: Uint128)
    current_staked_amount <- backers_prev_deposit[_sender];
    total_staked_amount <- backers_current_deposit[_sender];
    match total_staked_amount with
    |   Some total_staked_amount =>
        match current_staked_amount with
        |   Some current_staked_amount =>
              PoolOutAssist amount total_staked_amount current_staked_amount
        |   None =>
              PoolOutAssist amount total_staked_amount zero
        end

    |   None =>
        err = UserNotPresent;
        ThrowError err
    end
end

(* The below function received the yield from the smart contract *)
transition AddFunds()
      accept

end

transition WithdrawStakeRewardsSuccessCallBack(ssnaddr: ByStr20, rewards: Uint128)
  accept
end

transition fetch_yield()
    IsOwner _sender;
    contract_address <- staking_contract;
    r_number <- round_number;
    current_balance <- _balance;
    prev_balance := current_balance;
    msg = {
        _recipient: contract_address;
        _amount: zero;
        _tag: "WithdrawStakeRewards";
        ssn_addr: _sender
    };
    msgs = one_msg msg;
    send msgs;
    r_number_new = builtin add r_number one;
    round_number := r_number_new
end

procedure updateUserDeposit(user: ByStr20, yield: Uint128)
(* statements go below *)
    current_deposit <- backers_current_deposit[user];
    match current_deposit with
    | Some amount =>
        new_amount = builtin add amount yield;
        backers_current_deposit[user] := new_amount
    | None =>
      err = UserNotPresent;
      ThrowError err
    end
end

procedure findValueSum(address_value: Pair ByStr20 Uint128)
(* statements go below *)
    match address_value with
    | Pair address value =>
        previous_total <- total_sum;
        current_total = builtin add previous_total value;
        total_sum := current_total
    end
end

procedure updateRecompoundingYield(user: ByStr20, user_yield: Uint128)
(* statements go below *)
    compounding_contribution <- backers_p_interest[user];
    match compounding_contribution with
    | Some percentage =>
        user_recompounding_yield_tmp = builtin mul percentage user_yield;
        user_recompounding_yield = builtin div user_recompounding_yield_tmp hundred;
        total_restaking_amount_tmp <- total_restaking_amount;
        current_restaking_amount = builtin add total_restaking_amount_tmp user_recompounding_yield;
        total_restaking_amount := current_restaking_amount;
        user_interests[user] := user_recompounding_yield;
        updateUserDeposit user user_recompounding_yield
    | None =>
        err = UserNotPresent;
        ThrowError err
    end
    
end

procedure updateLotteryYield(user: ByStr20, user_yield: Uint128)
(* statements go below *)
    lottery_contribution <- backers_p_lottery[user];
    match lottery_contribution with
    | Some percentage =>
        user_lottery_yield_tmp = builtin mul percentage user_yield;
        user_lottery_yield = builtin div user_lottery_yield_tmp hundred;
        user_lottery_deposit[user] := user_lottery_yield
    | None =>
        err = UserNotPresent;
        ThrowError err
    end
end


procedure distributeYield(address_value: Pair ByStr20 Uint128)
(* statements go below *)
    yield <- current_yield;
    total_amount <- total_sum;
    match address_value with
    |   Pair user amount =>
            user_yield_tmp = builtin mul yield amount;
            user_yield = builtin div user_yield_tmp total_amount;
            updateRecompoundingYield user user_yield;
            updateLotteryYield user user_yield    
    end
end

procedure calcUserYield(yields: Uint128)
(* statements go below *)

    (* Updated calculations code *)
    (* Calculate total amount deposited *)
    total_sum := zero;
    user_amounts <- backers_prev_deposit;
    user_amount_listpair = builtin to_list user_amounts;
    forall user_amount_listpair findValueSum;
    (* Calculated total amount deposited in field total_sum *)
    forall user_amount_listpair distributeYield;

    restaking_amount <- total_restaking_amount;
    staking_contract_address <- staking_contract;
    current_ssn_addr <- ssn_addr;
    msg_stake = {
        _tag: "DelegateStake";
        _recipient: staking_contract_address;
        _amount: restaking_amount;
        ssn_addr: current_ssn_addr
    };
    msgs = one_msg msg_stake;
    send msgs
end

transition compound_yield()
  IsOwner _sender;
  contract_address <- staking_contract;
  current_balance <- _balance;
  current_yield := current_balance;
  yield <- current_yield;
  owner_cut_init = builtin mul yield owner_compound_percent;
  owner_cut = builtin div owner_cut_init hundred;
  users_yield = builtin sub yield owner_cut;
  total_restaking_amount := zero;
  calcUserYield users_yield;
  backers_current_deposit_local <- backers_current_deposit;
  backers_prev_deposit := backers_current_deposit_local;
  msg = {
          _recipient: owner;
          _amount: owner_cut;
          _tag: "Owner Cut from compounding"
      };
  msgs = one_msg msg;
  send msgs
end

procedure assignWinner(user_start_end: Pair ByStr20 (Pair Uint128 Uint128))
    
    match user_start_end with
    | Pair user start_end =>
      match start_end with
      | Pair start_idx end_idx =>
        random_seed_local <- random_seed;
        is_start = uint128_ge random_seed_local start_idx;
        is_end = uint128_gt end_idx random_seed_local;

        match is_start with
        | True =>
        match is_end with
        | True =>
            lottery_winner := user;
            e = {_eventname: "Lottery winner"; winner: user};
            event e
        | False =>
        end
        | False =>
        end
      end
    end
end

procedure findUserRange(user_amount: Pair ByStr20 Uint128)
(* statements go below *)
    match user_amount with
    | Pair user amount =>
      user_range_start <- range_start;
      user_range_end = builtin add user_range_start amount;
      user_range = Pair {Uint128 Uint128} user_range_start user_range_end;
      user_lottery_range[user] := user_range;
      range_start := user_range_end
    end
end


transition lottery(rand_seed: Uint128)
    IsOwner _sender;
    user_lottery_contribution  <- user_lottery_deposit;
    user_lotteryDeposit_listpair = builtin to_list user_lottery_contribution;
    range_start := zero;
    forall user_lotteryDeposit_listpair findUserRange;

    sum <- range_start;
    owner_cut_init = builtin mul sum owner_lottery_percent;
    owner_cut = builtin div owner_cut_init hundred;

    user_lottery_range_c <- user_lottery_range;
    user_range_list = builtin to_list user_lottery_range_c;
    seed = builtin rem rand_seed sum;
    random_seed := seed;
    prize = builtin sub sum owner_cut;
    lottery_prize := prize;

    forall user_range_list assignWinner;

    msg = {
            _recipient: _sender;
            _amount: owner_cut;
            _tag: "Lottery Owner Cut"
        };
    msgs = one_msg msg;
    send msgs
end

transition PayoutLotteryWinner()
    IsOwner _sender;
    lottery_prize_amount <- lottery_prize;
    lottery_winner_current_round <- lottery_winner;
    lottery_prize := zero;
    msg = {
            _recipient: lottery_winner_current_round;
            _amount: lottery_prize_amount;
            _tag: "Lottery Winner Payout"
        };
    msgs = one_msg msg;
    send msgs
end

